# -*- coding: utf-8 -*-
"""BlackFriday_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cSepcRtEGT-2sJhVM0xuERTU0a4OZDFd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df_train = pd.read_csv('train.csv')
df_train.head()

df_test = pd.read_csv('test.csv')
df_test.head()

df = df_train.append(df_test)
df.head()

df.info()

df.describe()

df.drop(['User_ID'],axis=1,inplace=True)
df.head()

"""## There are three ways to one hot enocode data

### Pandas
1.
df = pd.get_dummies(data=df,columns=['Gender'],drop_first=True)

2.
df['Gender']=df['Gender'].map({'F':0,'M':1})


### Sklearn - One hot Encoding
3.

"""

df = pd.get_dummies(data=df,columns=['Gender'],drop_first=True)

df.head()

# Alternative to Binary Encoding
df['Gender']=df['Gender'].map({'F':0,'M':1})
df.head()

df['Age'].value_counts()

df.info()



"""## There are two ways to label encode it

### Pandas
1.
df['Age']=df['Age'].map({'0-17':1,'18-25':2,'26-35':3,'36-45':4,'46-50':5,'51-55':6,'55+':7})

### Sklearn - Label Encoding
2.
from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
df['Age']= label_encoder.fit_transform(df['Age'])
df['Age'].unique()
"""

df['Age']=df['Age'].map({'0-17':1,'18-25':2,'26-35':3,'36-45':4,'46-50':5,'51-55':6,'55+':7})
df.head()

df['City_Category'].value_counts()

df = pd.get_dummies(data=df,columns=['City_Category'])
df.head()

df.isnull().sum()

df.describe()

df['Product_Category_2'].value_counts()

df['Product_Category_2'].mode()[0]

"""## Replace the missing values with mode
df['Product_Category_2'] = df['Product_Category_2'].fillna(df['Product_Category_2'].mode()[0])
"""

# Replace the missing valuees with mode
df['Product_Category_2'] = df['Product_Category_2'].fillna(df['Product_Category_2'].mode()[0])

df['Product_Category_3']=df['Product_Category_3'].fillna(df['Product_Category_3'].mode()[0])

df.head()

df.info()

df.shape

df['Stay_In_Current_City_Years'].value_counts()

df['Stay_In_Current_City_Years']=df['Stay_In_Current_City_Years'].str.replace('+','')
df['Stay_In_Current_City_Years'].unique()

df['Stay_In_Current_City_Years'].value_counts()

"""### Converting object into integers

df['Stay_In_Current_City_Years']=df['Stay_In_Current_City_Years'].astype(int)
"""

df['Stay_In_Current_City_Years']=df['Stay_In_Current_City_Years'].astype(int)
df.info()

df['City_Category_A'] = df['City_Category_A'].astype(int)
df['City_Category_B'] = df['City_Category_B'].astype(int)
df['City_Category_C'] = df['City_Category_C'].astype(int)
df.info()

df['Gender_M'] = df['Gender_M'].astype(int)
df.info()

sns.barplot(x='Age',y='Purchase',hue='Gender_M',data=df)

df_test=df[df['Purchase'].isnull()]
df_train=df[~df['Purchase'].isnull()]
X=df_train.drop('Purchase',axis=1)
X.head()

len(X['Product_ID'].unique())

df.shape

print(783667/3631)

X.drop(['Product_ID'],axis=1,inplace=True)

X.head()

y = df_train['Purchase']

df_test.drop(['Product_ID'],axis=1,inplace=True)

df_test.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
     X, y, test_size=0.33, random_state=42)



"""## feature Scaling

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)
"""

## feature Scaling
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

X_train

